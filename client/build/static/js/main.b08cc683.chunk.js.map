{"version":3,"sources":["styles/pages/SplashPage.module.scss","pages/Viewer.tsx","components/SplashPage.tsx","App.tsx","serviceWorker.ts","index.tsx","styles/pages/Viewer.module.scss"],"names":["module","exports","Viewer","props","player","useRef","useEffect","toggle","current","addEventListener","socket","emit","id","currentTime","on","data","pause","play","video","url","URL","createObjectURL","src","removeEventListener","className","styles","body","show","hidden","controls","ref","SplashPage","useState","stage","container","title","style","line","percent","strokeWidth","strokeColor","subtitle","renderStage","Select","option","Auth","auth","label","type","placeholder","alternative","App","setAuth","subtitles","result","removeAllListeners","io","secure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b08cc683.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"SplashPage_body__29rwu\",\"container\":\"SplashPage_container__hV7YC\",\"title\":\"SplashPage_title__C3RiL\",\"subtitle\":\"SplashPage_subtitle__3Gyzc\",\"option\":\"SplashPage_option__fjF7i\",\"auth\":\"SplashPage_auth__v5PyR\",\"label\":\"SplashPage_label__qVV4Y\",\"alternative\":\"SplashPage_alternative__2ds4A\"};","import React, { useEffect, useRef } from 'react'\r\nimport { socket } from '../App';\r\n//import Plyr from 'plyr'\r\nimport 'plyr/dist/plyr.css'\r\n \r\nimport styles from '../styles/pages/Viewer.module.scss';\r\n\r\ntype Props = {\r\n  video: File | null,\r\n  subtitles: File | null\r\n}\r\n\r\nconst Viewer: React.FC<Props> = (props) => {\r\n\r\n  var player = useRef<HTMLVideoElement>(null);\r\n \r\n  useEffect(() => {\r\n\r\n    var toggle = true;\r\n    if(player.current){\r\n\r\n      player.current.addEventListener('play', () => {\r\n        if(toggle && player.current){\r\n          socket.emit('play', {id: socket.id, currentTime: player.current.currentTime});\r\n        }\r\n        toggle = true;\r\n      });\r\n\r\n      player.current.addEventListener('pause', () => {\r\n        if(toggle && player.current){\r\n          socket.emit('pause', {id: socket.id, currentTime: player.current.currentTime});\r\n        }\r\n        toggle = true;\r\n      });\r\n\r\n    }\r\n\r\n    socket.on('pause', (data: {id: string, currentTime: number}) => {\r\n      if(data.id !== socket.id && player.current){\r\n        toggle = false;\r\n        player.current.pause();\r\n        player.current.currentTime = data.currentTime;\r\n      }\r\n    });\r\n    socket.on('play', (data: {id: string, currentTime: number}) => {\r\n      if(data.id !== socket.id && player.current){\r\n        toggle = false;\r\n        player.current.currentTime = data.currentTime;\r\n        player.current.play();\r\n      }\r\n    });\r\n\r\n    if(props.video !== null && player.current){\r\n      let url = URL.createObjectURL(props.video);\r\n      player.current.src = url;\r\n    }\r\n\r\n    return(() => {\r\n      if(player.current){\r\n        player.current.removeEventListener('play', () => {});\r\n        player.current.removeEventListener('pause', () => {});\r\n      }\r\n    });\r\n\r\n  }, [props]);\r\n\r\n  return(\r\n    <div className={`${styles.body} ${props.video ? styles.show : styles.hidden}`}>\r\n      <video controls ref={player}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const config = {\r\n//   options: {\r\n//     controls: [\r\n//       // 'rewind',\r\n//       'play',\r\n//       // 'fast-forward',\r\n//       'progress',\r\n//       'current-time',\r\n//       // 'duration',\r\n//       'mute',\r\n//       'volume',\r\n//       'settings',\r\n//       'fullscreen',\r\n//       'pip'\r\n//     ],\r\n//     settings: ['captions', 'quality', 'speed'],\r\n//   }\r\n// }\r\n\r\nexport default Viewer;","import React, { useState } from 'react';\r\nimport { Line  } from 'rc-progress';\r\nimport { HiOutlineUserGroup, HiUserAdd } from 'react-icons/hi'\r\nimport styles from '../styles/pages/SplashPage.module.scss';\r\n\r\nconst SplashPage: React.FC = () => {\r\n\r\n  const [stage, setStage] = useState(1);\r\n\r\n  const renderStage = () => {\r\n    switch(stage){\r\n      case 0:\r\n        return <Select/>\r\n      case 1:\r\n        return <Auth/>\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className={styles.body}>\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>\r\n          QVC\r\n        </div>\r\n\r\n        <Line style={styles.line} percent=\"5\" strokeWidth=\"1\" strokeColor=\"#1877F2\"/>\r\n\r\n        <div className={styles.subtitle}>\r\n          Welcome to Quarantine Video Client! Sync playback when watching videos remotely.\r\n        </div>\r\n\r\n        {renderStage()}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SplashPage; \r\n\r\nconst Select: React.FC = () => {\r\n  return(\r\n    <div>\r\n      <div className={styles.option}>\r\n        <HiOutlineUserGroup/> Create a New Room\r\n      </div>\r\n      <div className={styles.option}>\r\n        <HiUserAdd/> Join a Room\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Auth: React.FC = () => {\r\n  return (\r\n    <div className={styles.auth}>\r\n      <div className={styles.label}>Room Name</div>\r\n      <input type=\"text\" placeholder=\"Room Name\"></input>\r\n\r\n      <div className={styles.label}>Room Password</div>\r\n      <input type=\"password\" placeholder=\"Room Password\"></input>\r\n\r\n      <div className={styles.label}>Your Username</div>\r\n      <input type=\"text\" placeholder=\"Your Username\"></input>\r\n\r\n      <button>Create Room</button>\r\n      <div className={styles.alternative}>Join a Room Instead?</div>\r\n\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\nimport io from 'socket.io-client';\n\nimport './App.scss';\n\nimport Viewer from './pages/Viewer';\nimport Configurator from './components/Configurator';\nimport Authenticator from './components/Authenticator'\nimport SplashPage from './components/SplashPage';\n\nconst App: React.FC = () => {\n\n  const [auth, setAuth] = useState(false);\n  const [video, setVideo] = useState<File|null>(null);\n  const [subtitles, setSubtitles] = useState<File|null>(null);\n\n  socket.on('createRoom', (data: {result: boolean}) => {\n    setAuth(data.result);\n  });\n\n  socket.on('joinRoom', (data: {result: boolean}) => {\n    setAuth(data.result);\n  });\n\n  socket.on('disconnect', () => {\n    socket.removeAllListeners();\n  });\n\n  return(\n    <div>\n      <SplashPage/>\n      <Viewer video={video} subtitles={subtitles}/>\n      {/* {!auth ? <Authenticator/> : null}\n      {!auth || video !== null ? null :\n        <Configurator \n          video = {video}\n          setVideo={setVideo}\n          subtitles = {subtitles} \n          setSubtitles={setSubtitles}\n        />\n      } */}\n    </div>\n  );\n}\n\nexport default App;\n//export const socket = io('http://35.202.216.223:5000/', {secure: true});\nexport const socket = io('http://localhost:8080', {secure: true});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Viewer_body__1rpcF\",\"show\":\"Viewer_show__21fzy\",\"hidden\":\"Viewer_hidden__PyOua\"};"],"sourceRoot":""}